---
// 1. Interfaz simplificada
interface Recipe {
  id: number;
  name: string;
  userId: number;
}

// Datos iniciales (pueden venir de una API o base de datos)
const initialRecipes: Recipe[] = [];
---

<div id="recipes-manager" class="bg-white rounded-lg shadow p-6">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-2xl font-bold">Gestión de Recetas</h2>
    <button
      id="new-recipe-btn"
      type="button"
      class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
    >
      Nueva Receta
    </button>
  </div>

  <!-- Formulario -->
  <div class="bg-white rounded-lg shadow p-6 mb-6">
    <h3 id="form-title" class="text-lg font-semibold mb-4">Nueva Receta</h3>
    <form id="recipe-form">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-gray-700 text-sm font-bold mb-2" for="userId">User ID</label>
          <input
            type="number"
            id="userId"
            name="userId"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>
        <div>
          <label class="block text-gray-700 text-sm font-bold mb-2" for="name">Nombre de la Receta</label>
          <input
            type="text"
            id="name"
            name="name"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>
      </div>

      <div class="flex justify-end mt-6">
        <button
          id="cancel-btn"
          type="button"
          class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 px-4 rounded mr-2"
        >
          Cancelar
        </button>
        <button
          id="submit-btn"
          type="submit"
          class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
        >
          Crear Receta
        </button>
      </div>
    </form>
  </div>

  <!-- Tabla -->
  <div class="bg-white rounded-lg shadow">
    <table class="min-w-full">
      <thead>
        <tr>
          <th class="px-6 py-3 border-b-2 border-gray-200 bg-gray-50 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">ID</th>
          <th class="px-6 py-3 border-b-2 border-gray-200 bg-gray-50 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">User ID</th>
          <th class="px-6 py-3 border-b-2 border-gray-200 bg-gray-50 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Nombre</th>
          <th class="px-6 py-3 border-b-2 border-gray-200 bg-gray-50 text-left text-xs font-semibold text-gray-500 uppercase tracking-wider">Acciones</th>
        </tr>
      </thead>
      <tbody id="recipes-table-body" class="bg-white">
        <!-- Las filas se insertarán aquí con JS -->
      </tbody>
    </table>
  </div>
</div>

<script define:vars={{ initialRecipes }}>
  // Estado de la aplicación]
  async function fetchRecipes() {
      const recipes = await fetch('http://localhost:3000/api/recipes').then(res => res.json());
      return recipes;
    }
  let recipes = initialRecipes;
  let editingRecipeId = null;
  // Elementos del DOM
  const form = document.getElementById('recipe-form');
  const formTitle = document.getElementById('form-title');
  const tableBody = document.getElementById('recipes-table-body');
  const newRecipeBtn = document.getElementById('new-recipe-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  const submitBtn = document.getElementById('submit-btn');
  const nameInput = document.getElementById('name');
  const userIdInput = document.getElementById('userId');

  async function renderTable() {
    let recipes = await fetchRecipes();
    tableBody.innerHTML = '';
    recipes.forEach(recipe => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${recipe.id}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${recipe.userId}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${recipe.name}</td>
        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
          <button type="button" data-edit-id="${recipe.id}" class="text-indigo-600 hover:text-indigo-900">Editar</button>
          <button type="button" data-delete-id="${recipe.id}" class="text-red-600 hover:text-red-900">Eliminar</button>
        </td>
      `;
      tableBody.appendChild(row);
    });
  }

  function resetForm() {
    form.reset();
    editingRecipeId = null;
    formTitle.textContent = 'Nueva Receta';
    submitBtn.textContent = 'Crear Receta';
  }

  async function handleEdit(id) {
    const recipes = await fetchRecipes();
    const recipeFound = recipes.find(r => r.id === id);
    if (!recipeFound) return;

    editingRecipeId = id;
    nameInput.value = recipeFound.name;
    userIdInput.value = recipeFound.userId;
    
    formTitle.textContent = 'Editar Receta';
    submitBtn.textContent = 'Guardar Cambios';
  }

  // Event Listeners
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const name = nameInput.value;
    const userId = parseInt(userIdInput.value, 10);

    if (!name || isNaN(userId)) {
      alert('Por favor, completa todos los campos.');
      return;
    }

    if (editingRecipeId) {
      // Actualizar
      const response = await fetch(`http://localhost:3000/api/recipes/${editingRecipeId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, userId })
      });
      resetForm();
      renderTable();
    } else {
      // Crear
      const data = {
        name,
        userId
      };
      const response = await fetch('http://localhost:3000/api/recipes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      resetForm();
      renderTable();
    }
    
    resetForm();
    renderTable();
  });

  tableBody.addEventListener('click', async (e) => {
    const target = e.target;
    if (target.dataset.editId) {
      await handleEdit(parseInt(target.dataset.editId, 10));
    }
    if (target.dataset.deleteId) {
      if (confirm('¿Estás seguro de que quieres eliminar esta receta?')) {
        const idToDelete = parseInt(target.dataset.deleteId, 10);
        const response = await fetch(`http://localhost:3000/api/recipes/${idToDelete}`, {
          method: 'DELETE'
        });
        resetForm();
        renderTable();
      }
    }
  });

  newRecipeBtn.addEventListener('click', resetForm);
  cancelBtn.addEventListener('click', resetForm);

  // Renderizado inicial
  renderTable();
</script>
